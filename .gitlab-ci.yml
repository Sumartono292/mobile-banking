# image: golang:1.21-alpine

variables:
  REPO_NAME: mobile-banking-backend
  GO111MODULE: "on"
  GOPATH: "$CI_PROJECT_DIR/.go"
  CACHE_DIR: "$CI_PROJECT_DIR/.cache"
  POSTGRES_DB: mobile_banking
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  DATABASE_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB 
  pr_num: ""
# Cache dependencies across jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .go/pkg/mod
    - vendor/

stages:
  - prepare
  - build
  - test
  - deploy
  - notify


build:
  image: docker:20.10.16
  stage: build
  services:
    - docker:20.10.16-dind
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
    - echo $CA > ca.pem
  script:
    - docker build -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
  only:
    refs:
      - main
      - development
      - staging


unit-tests:
  stage: test
  image: golang:1.21
  script:
    - echo "Testing with Go ${GO_VERSION} on ${OS} with ${DATABASE}"
    - go mod download
    - go test ./tests/unit/... -v
  allow_failure: true
  only:
    - main
    - merge_requests
    - triggers
    - development
    - staging
  except:
    variables:
      - $CI_PIPELINE_SOURCE == "external_pull_request_event"

integration-tests:
  stage: test
  image: golang:1.21
  services:
    - name: postgres:13
      alias: postgres
  variables:
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - apt-get update && apt-get install -y postgresql-client
    - go mod download
  script:
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - export DATABASE_URL="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB"
    - go test ./tests/integration/... -v
  only:
    - merge_requests
    - main
    - development
    - staging

e2e-tests:
  stage: test
  needs:
    - build
  image: golang:1.21
  services:
    - name: $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
      alias: app
      variables:
        DATABASE_URL: $DATABASE_URL_TEST?$DATABASE_URL_CA
  variables:
    POSTGRES_HOST_AUTH_METHOD: trust
    FF_NETWORK_PER_BUILD: 1
    DATABASE_URL: $DATABASE_URL_TEST?$DATABASE_URL_CA
  before_script:
    - apt-get update && apt-get install -y postgresql-client
    - go mod download
  script:
    - export ServerAddress="http://app:8080"
    - go test ./tests/e2e/... -v
  only:
    - development
    - staging
    - main

deploy-dev:
  stage: deploy
  needs:
    - unit-tests
    - integration-tests
    - e2e-tests
  before_script:
    - echo $GCLOUD_SERVICE_KEY > service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
    - gcloud config set project $GCP_PROJECT_ID
  image: google/cloud-sdk:stable
  script:
    - gcloud run deploy $SERVICE_NAME_DEV
        --image $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
        --region asia-southeast2 
  only:
    variables:
      - $pr_num == ""
    refs:
      - development

deploy-staging:
  stage: deploy
  needs:
    - unit-tests
    - integration-tests
    - e2e-tests
  before_script:
    - echo $GCLOUD_SERVICE_KEY > service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
    - gcloud config set project $GCP_PROJECT_ID
  image: google/cloud-sdk:stable
  script:
    - gcloud run deploy $SERVICE_NAME_STAGING
        --image $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
        --region asia-southeast2 
  only:
    variables:
      - $pr_num == ""
    refs:
      - staging

deploy-prod:
  stage: deploy
  when: manual
  needs:
    - unit-tests
    - integration-tests
    - e2e-tests
  before_script:
    - echo $GCLOUD_SERVICE_KEY > service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
    - gcloud config set project $GCP_PROJECT_ID
  image: google/cloud-sdk:stable
  script:
    - gcloud run deploy $SERVICE_NAME
        --image $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
        --region asia-southeast2 
  only:
    variables:
      - $pr_num == ""
    refs:
      - main

github-pr-notification:
  stage: notify
  image: curlimages/curl
  script:
    - |
      # Check if this is a merge request
      if [ -n "$CI_MERGE_REQUEST_IID" ]; then
        ALL_JOBS_PASSED=true
        # List of jobs to check
        JOBS_TO_CHECK=("unit-tests" "integration-tests" "build")
        
        for job in "${JOBS_TO_CHECK[@]}"; do
          if ! curl -s --header "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" \
              "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/jobs" | \
              jq -e ".[] | select(.name == \"$job\" and .status != \"success\")"; then
            ALL_JOBS_PASSED=false
            break
          fi
        done
        
        # If all jobs passed, send GitHub PR comment
        if [ "$ALL_JOBS_PASSED" = true ]; then
          PR_COMMENT="✅ All checks have passed for merge request #$CI_MERGE_REQUEST_IID

          Checks completed:
          - Unit Tests ✓
          - Integration Tests ✓
          - Build ✓

          Pipeline Details:
          - Commit: $CI_COMMIT_SHORT_SHA
          - Branch: $CI_COMMIT_REF_NAME
          - Pipeline URL: $CI_PIPELINE_URL"
          
          # Send notification to GitHub using GitHub API
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$GITHUB_OWNER/$SERVICE_NAME/issues/$pr_number/comments" \
            -d "{\"body\": \"$PR_COMMENT\"}"
        fi
      fi

  only:
    variables:
      - $pr_num != ""
  allow_failure: true